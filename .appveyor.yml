# Notes:
# - Minimal appveyor.yml file is an empty file. All sections are optional.
# - Indent each level of configuration with 2 spaces. Do not use tabs!
# - All section names are case-sensitive.
# - Section names should be unique on each level.

#---------------------------------#
#  general configuration          #
#---------------------------------#

# version format
version: '{branch}-{build}'

# Do not build on tags (GitHub only)
skip_tags: true

# manual mode
branches:
  except:
    - /.*/


#---------------------------------#
#  environment configuration      #
#---------------------------------#

# environment variables
# build system info: https://www.appveyor.com/docs/windows-images-software/
os: Visual Studio 2022

environment:
  REPO_DIR: &REPO_DIR c:\project  # directory created by appveyor

  NASM_URL: https://www.nasm.us/pub/nasm/releasebuilds/2.16.03/win64/nasm-2.16.03-win64.zip

  CMAKE_GENERATOR_X86: -G "Visual Studio 17 2022" -A "Win32"
  CMAKE_GENERATOR_X64: -G "Visual Studio 17 2022" -A "x64"
  CMAKE_COMMON_DEFINES: -DCMAKE_TOOLCHAIN_FILE="%REPO_DIR%\src\msvc_flags.cmake"

  OGG_SOL_FILE: ogg.sln
  OGG_MSBUILD_CMD_X86: /maxcpucount /property:Configuration=Release,Platform=Win32 /target:ogg
  OGG_MSBUILD_CMD_X64: /maxcpucount /property:Configuration=Release,Platform=x64   /target:ogg

  VORBIS_SOL_FILE: vorbis.sln
  VORBIS_CMAKE_X86: -DOGG_INCLUDE_DIR="%REPO_DIR%\lib\ogg\include" -DOGG_LIBRARY="%REPO_DIR%\lib\ogg\_build\Win32\Release\ogg.lib"
  VORBIS_CMAKE_X64: -DOGG_INCLUDE_DIR="%REPO_DIR%\lib\ogg\include" -DOGG_LIBRARY="%REPO_DIR%\lib\ogg\_build\x64\Release\ogg.lib"
  VORBIS_MSBUILD_CMD_X86: /maxcpucount /property:Configuration=Release,Platform=Win32 /target:vorbisfile
  VORBIS_MSBUILD_CMD_X64: /maxcpucount /property:Configuration=Release,Platform=x64 /target:vorbisfile

  FLAC_SOL_FILE: src\libFLAC\FLAC.vcxproj
  FLAC_CMAKE_X86: -DINSTALL_MANPAGES=OFF -DOGG_INCLUDE_DIR="%REPO_DIR%\lib\ogg\include" -DOGG_LIBRARY="%REPO_DIR%\lib\ogg\_build\Win32\Release\ogg.lib"
  FLAC_CMAKE_X64: -DINSTALL_MANPAGES=OFF -DOGG_INCLUDE_DIR="%REPO_DIR%\lib\ogg\include" -DOGG_LIBRARY="%REPO_DIR%\lib\ogg\_build\x64\Release\ogg.lib"
  FLAC_MSBUILD_CMD_X86: /maxcpucount /property:Configuration=Release,Platform=Win32
  FLAC_MSBUILD_CMD_X64: /maxcpucount /property:Configuration=Release,Platform=x64

  VORBIS-TOOLS_SOL_FILE: vorbis-tools.sln
  VORBIS-TOOLS_MSBUILD_CMD_X86: /maxcpucount /property:Configuration=Release,Platform=Win32
  VORBIS-TOOLS_MSBUILD_CMD_X64: /maxcpucount /property:Configuration=Release,Platform=x64

# clone directory
clone_folder: *REPO_DIR


#---------------------------------#
#  build configuration            #
#---------------------------------#

# scripts to run before build
before_build:
  # git submodules, https does not support `--depth 1` :(
  - cd "%REPO_DIR%"
  - git submodule update --init --remote --recursive

  # install NASM
  - cd \
  - appveyor DownloadFile "%NASM_URL%" -FileName "c:\nasm.zip"
  - 7z x "nasm.zip" > nul
  - move nasm-* NASM
  - set PATH=%PATH%;c:\NASM;
  - nasm -v

  # prepare ogg
  - cd "%REPO_DIR%\lib\ogg"
  - mkdir "_build" && cd "_build"
  - mkdir "Win32" && cd "Win32"
  - cmake %CMAKE_GENERATOR_X86% %CMAKE_COMMON_DEFINES% ..\..\
  - msbuild %OGG_SOL_FILE% %OGG_MSBUILD_CMD_X86%
  - cd ..
  - mkdir "x64" && cd "x64"
  - cmake %CMAKE_GENERATOR_X64% %CMAKE_COMMON_DEFINES% ..\..\
  - msbuild %OGG_SOL_FILE% %OGG_MSBUILD_CMD_X64%
  - cd ..

  # prepare vorbis
  - cd "%REPO_DIR%\lib\vorbis"
  - mkdir "_build" && cd "_build"
  - mkdir "Win32" && cd "Win32"
  - cmake %CMAKE_GENERATOR_X86% %CMAKE_COMMON_DEFINES% %VORBIS_CMAKE_X86% ..\..\
  - msbuild %VORBIS_SOL_FILE% %VORBIS_MSBUILD_CMD_X86%
  - cd ..
  - mkdir "x64" && cd "x64"
  - cmake %CMAKE_GENERATOR_X64% %CMAKE_COMMON_DEFINES% %VORBIS_CMAKE_X64% ..\..\
  - msbuild %VORBIS_SOL_FILE% %VORBIS_MSBUILD_CMD_X64%
  - cd ..

  # prepare flac
  - cd "%REPO_DIR%\lib\flac"
  - mkdir "_build" && cd "_build"
  - mkdir "Win32" && cd "Win32"
  - cmake %CMAKE_GENERATOR_X86% %CMAKE_COMMON_DEFINES% %FLAC_CMAKE_X86% ..\..\
  - msbuild %FLAC_SOL_FILE% %FLAC_MSBUILD_CMD_X86%
  - cd ..
  - mkdir "x64" && cd "x64"
  - cmake %CMAKE_GENERATOR_X64% %CMAKE_COMMON_DEFINES% %FLAC_CMAKE_X64% ..\..\
  - msbuild %FLAC_SOL_FILE% %FLAC_MSBUILD_CMD_X64%
  - cd ..

# to run your custom scripts instead of automatic MSBuild
build_script:
  - cd "%REPO_DIR%"
  - ps: (Get-Content 'lib\vorbis-tools\share\picture.c') | ForEach-Object { $_ -replace 'flac_picture_parse_eat\(void \*data', 'flac_picture_parse_eat(char *data' } | Set-Content 'lib\vorbis-tools\share\picture.c'
  # workaround for https://gitlab.xiph.org/xiph/vorbis-tools/-/issues/2329
  - ps: Add-Content -Path 'lib\vorbis-tools\share\utf8.c' -Value 'void convert_free_charset(void) {}'
  - if exist "lib\vorbis-tools\win32\VS2017" (rd /S /Q "lib\vorbis-tools\win32\VS2017")
  - move /Y "src\vorbis-tools\VS2017" "lib\vorbis-tools\win32"
  - msbuild "lib\vorbis-tools\win32\VS2017\%VORBIS-TOOLS_SOL_FILE%" %VORBIS-TOOLS_MSBUILD_CMD_X86%
  - msbuild "lib\vorbis-tools\win32\VS2017\%VORBIS-TOOLS_SOL_FILE%" %VORBIS-TOOLS_MSBUILD_CMD_X64%

# scripts to run before deployment
after_build:
  # prepare for artifacts packaging
  - 'cd "%REPO_DIR%"'
  - 'mkdir "win32" "x64"'
  - 'copy "lib\vorbis-tools\win32\VS2017\Release\*.exe" "win32"'
  - 'copy "lib\vorbis-tools\win32\VS2017\x64\Release\*.exe" "x64"'
  - '7z a -mx9 "vorbis-tools.7z" "Readme.md" "win32" "x64"'  # the artifact must reside at the source repo root
  - 'powershell -Command "& { $hash = (Get-FileHash -Algorithm SHA256 "vorbis-tools.7z").hash.ToString().toLower(); Write-Host $hash " *vorbis-tools.7z"; }" > "vorbis-tools.7z.sha256"'


#---------------------------------#
#  tests configuration            #
#---------------------------------#

# to disable automatic tests
test: off


#---------------------------------#
#  artifacts configuration        #
#---------------------------------#

artifacts:
  - path: vorbis-tools.7z
    name: exe
  - path: vorbis-tools.7z.sha256
    name: checksum
